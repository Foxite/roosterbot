<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ScheduleComponent_HelpText_Rooster" xml:space="preserve">
    <value>You can query the schedule for a class, staff member or room.
You don't have to indicate which you mean; I will pick up on this automatically.

You can use these commands to see this:
`{0}now`, `{0}next`, `{0}today`, `{0}tomorrow`, `{0}this week`, `{0}next week`
After your command, include what you want to know about. If you want to see where 2GD1 is right now, you do this:
`{0}now 2gd1`

You can also view day or week level.
With `{0}day tuesday a223` you can see what is scheduled on wednesday in room A2.23.
With `{0}in 2 weeks lance krasniqi` you can see the schedule for Lance Krasniqi, for that entire week.

`{0}in` supports hours, days, and weeks. `{0}in 2 hours a127`, `{0}in 3 days 4ga1`, `{0}in 1 week joram`

You can also see what is scheduled after the last item you viewed. Use `{0}after` for this.

Lastly, you can tell me what class you are in, so you won't have to tell me in every command. Use `{0}help your class` for more information.
Better yet: if I know what class a person is in, you can mention that person in my commands. Keep in mind that person gets a ping when you do this.</value>
    <comment>0: command prefix</comment>
  </data>
  <data name="ScheduleComponent_HelpText_Class" xml:space="preserve">
    <value>I can remember in what class you are, so you won't have to tell me every time.
To set your class: `{0}i am in &lt;class&gt;`, for example `{0}i am in 2gd1`.
After that you won't have to put your class in commands. So you can just type `{0}now` and I will know what to search for.
You can always check what class I think you're in by just typing `{0}i am in`, to check if it's still correct (or if you're suffering from amnesia, but I don't think that's the case.)</value>
    <comment>0: command prefix</comment>
  </data>
  <data name="StaffMemberInfoReader_CheckFailed" xml:space="preserve">
    <value>Is that a staff member? :thinking: If they are new, they need to be added by the bot owner.</value>
  </data>
  <data name="StudentSetInfoReader_CheckFailed_Direct" xml:space="preserve">
    <value>Thats not a class.</value>
  </data>
  <data name="StudentSetInfoReader_CheckFailed_MentionUser" xml:space="preserve">
    <value>I don't know in what class that person is. He/she needs to use `{0}i am in &lt;class&gt;` to change this.</value>
  </data>
  <data name="StudentSetInfoReader_CheckFailed_MentionSelf" xml:space="preserve">
    <value>I don't know in what class you are. Use `{0}i am in &lt;class&gt;` to change this.</value>
  </data>
  <data name="ScheduleModule_ReplyErrorMessage_UnknownIdentifier" xml:space="preserve">
    <value>I don't understand if you're talking about a class, staff member, or room.</value>
  </data>
  <data name="ScheduleModule_ItIsWeekend" xml:space="preserve">
    <value> It is weekend after all.</value>
  </data>
  <data name="ScheduleModule_HandleError_NotFound" xml:space="preserve">
    <value>That item is not on my schedules.</value>
  </data>
  <data name="ScheduleModule_HandleError_RecordsOutdated" xml:space="preserve">
    <value>I found that item on my schedules, but there is nothing on the schedule yet for that moment.</value>
  </data>
  <data name="ScheduleModule_HandleError_NoSchedulesAvailableForServer" xml:space="preserve">
    <value>There are no schedules available for this server.</value>
  </data>
  <data name="ScheduleModule_CurrentCommand_NoCurrentRecord" xml:space="preserve">
    <value>{0}: Not on schedule right now.</value>
    <comment>0: identifier info display text</comment>
  </data>
  <data name="UserClassModule_UserNotKnown" xml:space="preserve">
    <value>I don't know in what class you are.</value>
  </data>
  <data name="UserClassModule_UserIsInClass" xml:space="preserve">
    <value>You are in {0}.</value>
    <comment>0: user's student set</comment>
  </data>
  <data name="UserClassModule_ChangeHint" xml:space="preserve">
    <value>Use `{0}i am in &lt;your class&gt;` to change this.</value>
  </data>
  <data name="UserClassModule_ConfirmUserIsInClass" xml:space="preserve">
    <value>Noted: you are in {0}.</value>
    <comment>0: user's new student set</comment>
  </data>
  <data name="UserClassModule_ConfirmUserIsInClassWithOld" xml:space="preserve">
    <value>Noted: you are in {0}, and not in {1} anymore.</value>
    <comment>0: user's new student set
	1: user's previous student set</comment>
  </data>
  <data name="UserClassModule_InvalidClass" xml:space="preserve">
    <value>That's not a class.</value>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_NoStaffMembersFound" xml:space="preserve">
    <value>No staff members found.</value>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_ColumnFullName" xml:space="preserve">
    <value>Full name</value>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_ColumnAbbreviation" xml:space="preserve">
    <value>Abbr</value>
    <comment>Needs to be very short, recommend 4 characters max, because it will stretch up the column</comment>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_DiscordName" xml:space="preserve">
    <value>Discord name</value>
  </data>
  <data name="ScheduleModule_Summary" xml:space="preserve">
    <value>Automatically understands if you're talking about a class, staff member, or room.</value>
  </data>
  <data name="ScheduleModule_Name" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="ScheduleModule_CurrentCommand_Summary" xml:space="preserve">
    <value>See the current schedule item.</value>
  </data>
  <data name="ScheduleModule_NextCommand_Summary" xml:space="preserve">
    <value>See the next schedule item.</value>
  </data>
  <data name="ScheduleModule_WeekdayCommand_Summary" xml:space="preserve">
    <value>The schedule for a certain day. If you use today, then I will show you next week. `{0}today` does not do this.</value>
  </data>
  <data name="ScheduleModule_TomorrowCommand_Summary" xml:space="preserve">
    <value>See the schedule for tomorrow.</value>
  </data>
  <data name="ScheduleModule_TodayCommand_Summary" xml:space="preserve">
    <value>See the schedule for today.</value>
  </data>
  <data name="StaffMemberListModule_Name" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_Summary" xml:space="preserve">
    <value>A list of all staff members, their abbreviations, and their Discord names (if known). You can filter by name.</value>
  </data>
  <data name="UserClassModule_ModuleSummary" xml:space="preserve">
    <value>With these commands, you can set what class you are in, so you won't have to enter it in Schedule commands.</value>
  </data>
  <data name="UserClassModule_CommandSummary" xml:space="preserve">
    <value>Change what class you are in.</value>
  </data>
  <data name="UserClassModule_class_Name" xml:space="preserve">
    <value>class</value>
  </data>
  <data name="UserClassModule_ModuleName" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="IdentifierInfoReaderBase_ErrorMessage" xml:space="preserve">
    <value>That does not match anything.</value>
  </data>
  <data name="IdentifierInfoReader_Self" xml:space="preserve">
    <value>me</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_UnitDays" xml:space="preserve">
    <value>day|days</value>
    <comment>Separate possible values with |</comment>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_UnitHours" xml:space="preserve">
    <value>hour|hours</value>
    <comment>Separate possible values with |</comment>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_UnitParameterName" xml:space="preserve">
    <value>unit</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_UnitWeeks" xml:space="preserve">
    <value>week|weeks</value>
    <comment>Separate possible values with |</comment>
  </data>
  <data name="StaffMemberListModule_ListCommand_NameParameterName" xml:space="preserve">
    <value>name</value>
  </data>
  <data name="ScheduleModule_DayCommand" xml:space="preserve">
    <value>on|day</value>
  </data>
  <data name="ScheduleModule_NextCommand" xml:space="preserve">
    <value>next|later</value>
  </data>
  <data name="ScheduleModule_NextWeekCommand" xml:space="preserve">
    <value>next week</value>
  </data>
  <data name="ScheduleModule_NowCommand" xml:space="preserve">
    <value>now|schedule</value>
  </data>
  <data name="ScheduleModule_ThisWeekCommand" xml:space="preserve">
    <value>this week</value>
  </data>
  <data name="ScheduleModule_TodayCommand" xml:space="preserve">
    <value>today</value>
  </data>
  <data name="ScheduleModule_TomorrowCommand" xml:space="preserve">
    <value>tomorrow</value>
  </data>
  <data name="StudentSetInfoReader_CheckFailed_InaccessibleUser" xml:space="preserve">
    <value>I don't know that user.</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_NoRecordAtThatTime" xml:space="preserve">
    <value>There is nothing at that time.</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_OnlySupportUnits" xml:space="preserve">
    <value>I only support hours, days, and weeks.</value>
  </data>
  <data name="ScheduleModule_RespondDay_ColumnActivity" xml:space="preserve">
    <value>Activity</value>
  </data>
  <data name="ScheduleModule_RespondDay_ColumnTime" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="ScheduleModule_RespondDay_ColumnStaffMember" xml:space="preserve">
    <value>Staff member</value>
  </data>
  <data name="ScheduleModule_RespondDay_ColumnRoom" xml:space="preserve">
    <value>Room</value>
  </data>
  <data name="ScheduleModule_ShowNextWeekWorkingDays_Summary" xml:space="preserve">
    <value>See what is on a schedule next week.</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_Summary" xml:space="preserve">
    <value>Check the schedule in a number of hours, days, or weeks.</value>
  </data>
  <data name="ScheduleModule_ShowThisWeekWorkingDays_Summary" xml:space="preserve">
    <value>See what is on a schedule for this week.</value>
  </data>
  <data name="ScheduleModule_RespondDay_ColumnStudentSets" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="ScheduleComponent_HelpName_Class" xml:space="preserve">
    <value>your class</value>
  </data>
  <data name="ScheduleComponent_HelpName_Schedule" xml:space="preserve">
    <value>schedule</value>
  </data>
  <data name="UserClassModule_ConfirmNoChange" xml:space="preserve">
    <value>You're already in {0}!</value>
    <comment>0: student set</comment>
  </data>
  <data name="UserClassModule_Group" xml:space="preserve">
    <value>i</value>
  </data>
  <data name="UserClassModule_CommandName" xml:space="preserve">
    <value>am in</value>
  </data>
  <data name="RoomInfoReader_TypeDisplayName" xml:space="preserve">
    <value>room</value>
  </data>
  <data name="StudentSetInfoReader_TypeDisplayName" xml:space="preserve">
    <value>class</value>
  </data>
  <data name="StaffMemberInfoReader_TypeDisplayName" xml:space="preserve">
    <value>staff member</value>
  </data>
  <data name="IdentifierInfo_MultiReader_TypeDisplayName" xml:space="preserve">
    <value>info</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_UnitTypeDisplayName" xml:space="preserve">
    <value>hours, days, or weeks</value>
  </data>
  <data name="ScheduleModule_ShowFutureCommand_AmountParameterName" xml:space="preserve">
    <value>amount</value>
  </data>
  <data name="StaffMemberListModule_CommandName" xml:space="preserve">
    <value>staff members|staff member|teachers|teacher|staff</value>
  </data>
  <data name="ScheduleModule_DayCommand_Day" xml:space="preserve">
    <value>day</value>
  </data>
  <data name="ScheduleModule_IdentiferInfo_Name" xml:space="preserve">
    <value>identifier</value>
  </data>
  <data name="StaffMemberInfoReader_MultipleMatches" xml:space="preserve">
    <value>I don't know who you mean: {0}</value>
    <comment>0: list of match display texts</comment>
  </data>
  <data name="ScheduleModule_CurrentCommand_Next" xml:space="preserve">
    <value> This is what comes next:</value>
  </data>
  <data name="StaffMemberListModule_StaffMemberListCommand_ResultsFor" xml:space="preserve">
    <value>Results for `{0}`</value>
    <comment>0: input</comment>
  </data>
  <data name="ScheduleModule_FutureCommand" xml:space="preserve">
    <value>in</value>
  </data>
  <data name="ScheduleModule_ThatIsWeekend" xml:space="preserve">
    <value> That is weekend after all.</value>
  </data>
</root>