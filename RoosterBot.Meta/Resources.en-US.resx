<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CultureInfoReader_ParseFailed" xml:space="preserve">
    <value>I don't recognize that language.</value>
  </data>
  <data name="CultureInfoReader_ParseFailed_UnknownFlag" xml:space="preserve">
    <value>I don't recognize that flag.</value>
  </data>
  <data name="CultureInfoReader_TypeDisplayName" xml:space="preserve">
    <value>language</value>
  </data>
  <data name="GuildConfigModule_GetLanguage" xml:space="preserve">
    <value>This server's language is {0}.</value>
    <comment>0: current language name, localized</comment>
  </data>
  <data name="GuildConfigModule_GetPrefix" xml:space="preserve">
    <value>This server's command prefix is `{0}`.</value>
  </data>
  <data name="GuildConfigModule_Group" xml:space="preserve">
    <value>config</value>
  </data>
  <data name="GuildConfigModule_Language_Name" xml:space="preserve">
    <value>language</value>
  </data>
  <data name="GuildConfigModule_Prefix_Name" xml:space="preserve">
    <value>prefix</value>
  </data>
  <data name="GuildConfigModule_SetLanguage" xml:space="preserve">
    <value>This server's language is now {0}.</value>
    <comment>0: new language name, localized</comment>
  </data>
  <data name="GuildConfigModule_SetPrefix" xml:space="preserve">
    <value>This server's command prefix is now `{0}`.</value>
    <comment>0: new prefix</comment>
  </data>
  <data name="InfoModule_InfoCommand_ListItem" xml:space="preserve">
    <value>- {0} {1}</value>
    <comment>0: component name
1: component version</comment>
  </data>
  <data name="InfoModule_InfoCommand_PostText" xml:space="preserve">
    <value>All code is available on GitHub: {0}</value>
    <comment>Github link</comment>
  </data>
  <data name="InfoModule_InfoCommand_Pretext" xml:space="preserve">
    <value>This bot is based on RoosterBot {0}. Installed components:</value>
    <comment>0: bot version string</comment>
  </data>
  <data name="InfoModule_InfoCommand_Summary" xml:space="preserve">
    <value>Technical information about the bot.</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_CategoriesPretext" xml:space="preserve">
    <value>Use `{0}commands &lt;category&gt;` to get a list of commands. Available categories are:</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_CategoryDoesNotExist" xml:space="preserve">
    <value>That category doesn't exist.</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_CategoryEmpty" xml:space="preserve">
    <value>No commands found.</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_Category_Summary" xml:space="preserve">
    <value>List of commands in a category.</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_ModuleName" xml:space="preserve">
    <value>category</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_OptionalHint" xml:space="preserve">
    <value>Parameters marked with `(?)` are optional.</value>
  </data>
  <data name="MetaCommandsModule_CommandListCommand_Summary" xml:space="preserve">
    <value>List of categories with commands.</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_ChapterDoesNotExist" xml:space="preserve">
    <value>Sorry, that section does not exist.</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_HelpPretext" xml:space="preserve">
    <value>All my commands start with `{0}`.</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_HelpSectionsPretext" xml:space="preserve">
    <value>Use `{0}help &lt;section&gt;` to get help. Available sections are:</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_PostText" xml:space="preserve">
    <value>You can also use `{0}commands` to get a list of categories, and `{0}commands &lt;category&gt;` to see all commands for a certain category.</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_Section" xml:space="preserve">
    <value>section</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_Section_Summary" xml:space="preserve">
    <value>Explanation for a part of the bot.</value>
  </data>
  <data name="MetaCommandsModule_HelpCommand_Summary" xml:space="preserve">
    <value>Explanation for the bot.</value>
  </data>
  <data name="MetaCommandsModule_Name" xml:space="preserve">
    <value>Meta</value>
  </data>
  <data name="Meta_HelpName_Edit" xml:space="preserve">
    <value>edit</value>
  </data>
  <data name="Meta_HelpText_Edit" xml:space="preserve">
    <value>If you mistype a command, you can edit the message. I will see this and edit my reply according to your new command.

I also remove my replies if you delete a command.

To quickly edit your last message, klik on the textbox and press the :arrow_up: key. Remove the entire message to delete it.</value>
  </data>
  <data name="String1UserConfigModule_Group" xml:space="preserve">
    <value>i</value>
  </data>
  <data name="UserConfigModule_GetLanguage" xml:space="preserve">
    <value>Your language is {0}</value>
    <comment>0: current language name, localized</comment>
  </data>
  <data name="UserConfigModule_GetLanguage_NoneSet" xml:space="preserve">
    <value>You do not have a language set, the server language {0} will be used.</value>
    <comment>0: guild language name, localized</comment>
  </data>
  <data name="UserConfigModule_Language" xml:space="preserve">
    <value>speak</value>
  </data>
  <data name="UserConfigModule_SetLanguage" xml:space="preserve">
    <value>Your language is now {0}.</value>
    <comment>0: new language name, localized</comment>
  </data>
</root>