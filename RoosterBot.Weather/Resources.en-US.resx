<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CityInfoReader_ParseFailed" xml:space="preserve">
    <value>I don't know that city. Did you mean a city that has a different official name? Tell the bot owner about this.</value>
  </data>
  <data name="CityInfo_TypeDisplayName" xml:space="preserve">
    <value>town</value>
  </data>
  <data name="WeatherBit_Code_200" xml:space="preserve">
    <value>:cloud_lightning: Thunderstorm with light rain</value>
  </data>
  <data name="WeatherBit_Code_201" xml:space="preserve">
    <value>:thunder_cloud_rain: Thunderstorm with rain</value>
  </data>
  <data name="WeatherBit_Code_202" xml:space="preserve">
    <value>:thunder_cloud_rain: Thunderstorm with heavy rain</value>
  </data>
  <data name="WeatherBit_Code_230" xml:space="preserve">
    <value>:cloud_lightning: Thunderstorm with light drizzle</value>
  </data>
  <data name="WeatherBit_Code_231" xml:space="preserve">
    <value>:thunder_cloud_rain: Thunderstorm with drizzle</value>
  </data>
  <data name="WeatherBit_Code_232" xml:space="preserve">
    <value>:thunder_cloud_rain: Thunderstorm with heavy drizzle</value>
  </data>
  <data name="WeatherBit_Code_233" xml:space="preserve">
    <value>:thunder_cloud_rain: Thunderstorm with Hail</value>
  </data>
  <data name="WeatherBit_Code_300" xml:space="preserve">
    <value>:white_sun_rain_cloud: Light Drizzle</value>
  </data>
  <data name="WeatherBit_Code_301" xml:space="preserve">
    <value>:cloud_rain: Drizzle</value>
  </data>
  <data name="WeatherBit_Code_302" xml:space="preserve">
    <value>:cloud_rain: Heavy Drizzle</value>
  </data>
  <data name="WeatherBit_Code_500" xml:space="preserve">
    <value>:white_sun_rain_cloud: Light Rain</value>
  </data>
  <data name="WeatherBit_Code_501" xml:space="preserve">
    <value>:cloud_rain: Moderate Rain</value>
  </data>
  <data name="WeatherBit_Code_502" xml:space="preserve">
    <value>:cloud_rain: Heavy Rain</value>
  </data>
  <data name="WeatherBit_Code_511" xml:space="preserve">
    <value>:cloud_rain: Freezing rain</value>
  </data>
  <data name="WeatherBit_Code_520" xml:space="preserve">
    <value>:white_sun_rain_cloud: Light shower rain</value>
  </data>
  <data name="WeatherBit_Code_521" xml:space="preserve">
    <value>:cloud_rain: Shower rain</value>
  </data>
  <data name="WeatherBit_Code_522" xml:space="preserve">
    <value>:cloud_rain: Heavy shower rain</value>
  </data>
  <data name="WeatherBit_Code_600" xml:space="preserve">
    <value>:cloud_snow: Light snow</value>
  </data>
  <data name="WeatherBit_Code_601" xml:space="preserve">
    <value>:cloud_snow: Snow</value>
  </data>
  <data name="WeatherBit_Code_602" xml:space="preserve">
    <value>:cloud_snow: Heavy Snow</value>
  </data>
  <data name="WeatherBit_Code_610" xml:space="preserve">
    <value>:cloud_snow: Mix snow/rain</value>
  </data>
  <data name="WeatherBit_Code_611" xml:space="preserve">
    <value>:snowflake: Sleet</value>
  </data>
  <data name="WeatherBit_Code_612" xml:space="preserve">
    <value>:snowflake: Heavy sleet</value>
  </data>
  <data name="WeatherBit_Code_621" xml:space="preserve">
    <value>:cloud_snow: Snow shower</value>
  </data>
  <data name="WeatherBit_Code_622" xml:space="preserve">
    <value>:cloud_snow: Heavy snow shower</value>
  </data>
  <data name="WeatherBit_Code_623" xml:space="preserve">
    <value>:cloud_snow: Flurries</value>
  </data>
  <data name="WeatherBit_Code_700" xml:space="preserve">
    <value>:foggy: Mist</value>
  </data>
  <data name="WeatherBit_Code_711" xml:space="preserve">
    <value>:warning: Smoke</value>
  </data>
  <data name="WeatherBit_Code_721" xml:space="preserve">
    <value>:foggy: Haze</value>
  </data>
  <data name="WeatherBit_Code_731" xml:space="preserve">
    <value>:warning: Sand/dust</value>
  </data>
  <data name="WeatherBit_Code_741" xml:space="preserve">
    <value>:foggy: Fog</value>
  </data>
  <data name="WeatherBit_Code_751" xml:space="preserve">
    <value>:foggy: Freezing Fog</value>
  </data>
  <data name="WeatherBit_Code_800" xml:space="preserve">
    <value>:sunny: Clear sky</value>
  </data>
  <data name="WeatherBit_Code_801" xml:space="preserve">
    <value>:white_sun_small_cloud: Few clouds</value>
  </data>
  <data name="WeatherBit_Code_802" xml:space="preserve">
    <value>:white_sun_small_cloud: Scattered clouds</value>
  </data>
  <data name="WeatherBit_Code_803" xml:space="preserve">
    <value>:white_sun_cloud: Broken clouds</value>
  </data>
  <data name="WeatherBit_Code_804" xml:space="preserve">
    <value>:cloud: Overcast clouds</value>
  </data>
  <data name="WeatherBit_Code_900" xml:space="preserve">
    <value>&lt;:unknown:636213624460935188&gt; Unknown</value>
  </data>
  <data name="WeatherBit_Code_Unknown" xml:space="preserve">
    <value>Congratulations, you are eligible for a free Mars bar. Please contact the bot owner. Error code</value>
  </data>
  <data name="WeatherComponent_Attribution" xml:space="preserve">
    <value>Information is provided by WeatherBit.</value>
  </data>
  <data name="WeatherComponent_HelpName" xml:space="preserve">
    <value>weather</value>
  </data>
  <data name="WeatherComponent_HelpText" xml:space="preserve">
    <value>I can look up weather predictions for you and show them in Discord. To do this, use the `{0}weather` command.
This command has a few different forms:

`{0}weather utrecht` shows the current weather situation in Amsterdam. (`{0}weather now utrecht` or `{0}weather in utrecht` also works.)
`{0}weather in 2 hours amsterdam` or `{0}weather on wednesday 15:00 rotterdam`: These examples speak for themselves.
`{0}weather in 3 days hilversum` or `{0}weather on wednesday utrecht`: These commands show the weather on the given day, at 08:00, 12:00, and 18:00 hours.

Certain towns (Den Bosch and The Hague) have alternative names or spellings. If you find a city of which I don't know the alternative spelling, let the bot owner know about this.</value>
  </data>
  <data name="WeatherInfo_Present_ApparentTemperature" xml:space="preserve">
    <value> (feels like {0})</value>
    <comment>0: apparent temperature, unit included</comment>
  </data>
  <data name="WeatherInfo_Present_NoWind" xml:space="preserve">
    <value>:wind_blowing_face: No wind</value>
  </data>
  <data name="WeatherInfo_Present_Wind" xml:space="preserve">
    <value>:wind_blowing_face: {0} wind {1}</value>
    <comment>0: wind speed, unit included
1: cardinal direction, localized</comment>
  </data>
  <data name="WeatherModule_CurrentWeather" xml:space="preserve">
    <value>|now|in</value>
  </data>
  <data name="WeatherModule_DayForecast" xml:space="preserve">
    <value>|on</value>
  </data>
  <data name="WeatherModule_DayForecast_PretextCity" xml:space="preserve">
    <value>{0}: Weather {1}\n</value>
    <comment>0: city name
1: relative date reference</comment>
  </data>
  <data name="WeatherModule_DayForecast_PretextRegion" xml:space="preserve">
    <value>{0}, {1}: Weather {2}\n</value>
    <comment>0: city name
1: region name
2: relative date reference</comment>
  </data>
  <data name="WeatherModule_Group" xml:space="preserve">
    <value>weather</value>
  </data>
  <data name="WeatherModule_Name" xml:space="preserve">
    <value>weather</value>
  </data>
  <data name="WeatherModule_NoLookBack" xml:space="preserve">
    <value>I can't look back.</value>
  </data>
  <data name="WeatherModule_SevenDayLimit" xml:space="preserve">
    <value>I can't predict the weather beyond 7 days.</value>
  </data>
  <data name="WeatherModule_TimeForecast" xml:space="preserve">
    <value>|on</value>
  </data>
  <data name="WeatherModule_UnitForecast" xml:space="preserve">
    <value>in</value>
  </data>
  <data name="WeatherModule_Unit_Days" xml:space="preserve">
    <value>day|days</value>
    <comment>Separate with |</comment>
  </data>
  <data name="WeatherModule_Unit_Hours" xml:space="preserve">
    <value>hour|hours</value>
  </data>
  <data name="WeatherModule_UnknownUnit" xml:space="preserve">
    <value>I can only predict the weather per hour or per day.</value>
  </data>
</root>