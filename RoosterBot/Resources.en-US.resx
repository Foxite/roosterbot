<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandHandling_FatalError" xml:space="preserve">
    <value>Something has gone horribly wrong.</value>
  </data>
  <data name="RangeAttribute_CheckFailed" xml:space="preserve">
    <value>That's too high or too low.</value>
  </data>
  <data name="RequireBotManagerAttribute_Summary" xml:space="preserve">
    <value>Requires bot control</value>
  </data>
  <data name="RequireBotManagerAttribute_CheckFailed" xml:space="preserve">
    <value>You are not authorized to do that.</value>
  </data>
  <data name="UserIsModeratorAttribute_CheckFailed" xml:space="preserve">
    <value>You need moderator privileges to do this.</value>
  </data>
  <data name="UserIsModeratorAttribute_PublicOnly" xml:space="preserve">
    <value>This command only works in a public channel.</value>
  </data>
  <data name="UserIsModeratorAttribute_Summary" xml:space="preserve">
    <value>You need to be a moderator to do this.</value>
  </data>
  <data name="RequireCultureAttribute_CheckFailed" xml:space="preserve">
    <value>This command only works in {0}-speaking servers.</value>
    <comment>{0}: localized language name</comment>
  </data>
  <data name="RequireCultureAttribute_Summary" xml:space="preserve">
    <value>Requires a {0}-speaking server.</value>
    <comment>{0}: localized language name</comment>
  </data>
  <data name="CommandHandling_Cooldown" xml:space="preserve">
    <value>You're currently on cooldown for {0}.</value>
    <comment>0: cooldown time remaining (formatted and localized)</comment>
  </data>
  <data name="CommandHandling_Disabled" xml:space="preserve">
    <value>That command is disabled.</value>
  </data>
  <data name="CommandHandling_NotFound" xml:space="preserve">
    <value>I don't know that command. Use `{0}help` for information.</value>
    <comment>0: Command prefix</comment>
  </data>
  <data name="CommandHandling_OverloadsFailed" xml:space="preserve">
    <value>I don't know which of these you mean:</value>
    <comment>Followed by list of signatures</comment>
  </data>
  <data name="CommandHandling_ParseFailed" xml:space="preserve">
    <value>I don't understand the parameter(s).</value>
  </data>
  <data name="CommandHandling_UsageHint" xml:space="preserve">
    <value>Usage: {0}</value>
    <comment>0: command signature</comment>
  </data>
  <data name="RequireContextAttribute_PrivateOnly" xml:space="preserve">
    <value>This command only works in a private channel.</value>
  </data>
  <data name="RequireContextAttribute_PublicOnly" xml:space="preserve">
    <value>This command only works in a public channel.</value>
  </data>
  <data name="CommandHandling_ParamCheckFailed" xml:space="preserve">
    <value>Parameter {0}: {1}</value>
    <comment>0: Parameter name
1: failure reason</comment>
  </data>
  <data name="CommandHandling_Empty" xml:space="preserve">
    <value>The command returned no response.</value>
  </data>
  <data name="CommandHandling_ResponseTooLong" xml:space="preserve">
    <value>Something has gone horribly wrong, and the error message was longer than 2000 characters.</value>
  </data>
  <data name="CommandHandling_Arguments_NoWhitespaceBetweenArguments" xml:space="preserve">
    <value>No space between parameters.</value>
  </data>
  <data name="CommandHandling_Arguments_TooFewArguments" xml:space="preserve">
    <value>Not enough parameters.</value>
  </data>
  <data name="CommandHandling_Arguments_TooManyArguments" xml:space="preserve">
    <value>Too many parameters.</value>
  </data>
  <data name="CommandHandling_Arguments_UnclosedQuote" xml:space="preserve">
    <value>Unclosed quote.</value>
  </data>
  <data name="CommandHandling_Arguments_UnexpectedQuote" xml:space="preserve">
    <value>Unexpected quote.</value>
  </data>
  <data name="ChannelParser_TypeDisplayName" xml:space="preserve">
    <value>Channel</value>
  </data>
  <data name="MessageParser_TypeDisplayName" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="UserParser_TypeDisplayName" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="PlatformSpecificParser_MissingParser" xml:space="preserve">
    <value>The developer of {0} has neglected to integrate all TypeParsers! If you see this you may slap them.</value>
    <comment>0: platform component name</comment>
  </data>
  <data name="RequirePrivateAttribute_RequirePrivate" xml:space="preserve">
    <value>Must be in a private channel.</value>
  </data>
  <data name="RequirePrivateAttribute_RequirePublic" xml:space="preserve">
    <value>Must be in a public channel.</value>
  </data>
  <data name="CultureName_en-US" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="CultureName_nl-NL" xml:space="preserve">
    <value>Dutch</value>
  </data>
</root>